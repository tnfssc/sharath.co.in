---
import type { SimpleIcon } from "simple-icons";

export interface CardProps {
  bgColorClass?: string;
  width?: 1 | 2 | 4 | "default";
  height?: 1 | 2 | 4 | "default";
  href?: string;
  openInNew?: boolean;
  disableDescription?: boolean;
  icon?: SimpleIcon;
  iconSizeClass?: string;
  className?: string;
  style?: string;
}

let { bgColorClass, height, width, href, openInNew, disableDescription, icon, iconSizeClass, className, style } =
  Astro.props as CardProps;
if (!bgColorClass) bgColorClass = `bg-gradient-to-tr from-red-600 to-red-200`;
if (!height) height = "default";
if (!width) width = "default";
if (disableDescription === undefined) {
  if (width === 1 || height === 1) disableDescription = true;
  else disableDescription = false;
}
if (openInNew === undefined) openInNew = false;

const colSpan = {
  default: "col-span-2",
  1: "col-span-1",
  2: "col-span-2",
  4: "col-span-4",
};
const rowSpan = {
  default: "row-span-2",
  1: "row-span-1",
  2: "row-span-2",
  4: "row-span-4",
};
const widthClass = {
  default: "w-40",
  1: "w-20",
  2: "w-40",
  4: "w-80",
};
const heightClass = {
  default: "h-40",
  1: "h-20",
  2: "h-40",
  4: "h-80",
};
---

<a
  class={`${bgColorClass} flex flex-col justify-center items-center ${colSpan[width]} ${rowSpan[height]} ${widthClass[width]} ${heightClass[height]} 3d-card cursor-pointer hover:z-10 outer-container ${className}`}
  style={`transform-style: preserve-3d; transform: perspective(1000px); ${style}`}
  data-tilt-later
  data-tilt-glare="true"
  data-tilt-max-glare="0.2"
  data-tilt-reverse="true"
  data-tilt-gyroscope="false"
  data-tilt-max={5}
  data-tilt-scale={1.02}
  href={href}
  target={openInNew ? "_blank" : undefined}
  rel={openInNew ? "noreferrer noopener" : undefined}>
  <div style="transform: translateZ(48px)" class={`${disableDescription ? "block" : "title-container"}`}>
    <h1 class="text-2xl flex">
      <slot />
      {
        icon && (
          <div
            class={`h-6 w-6 ${iconSizeClass} text-white mt-1 ml-1.5`}
            set:html={icon.svg
              .replace('xmlns="http://www.w3.org/2000/svg"', 'fill="white"')
              .replace(/<title>.*<\/title>/, `<title></title>`)}
          />
        )
      }
    </h1>
  </div>
  <div
    style="transform: translateZ(48px)"
    class={`${disableDescription ? "hidden" : "description-container"} h-0 opacity-0`}>
    <div class={`${widthClass[width]} ${heightClass[height]} p-5`}>
      <h1 class="text-2xl flex">
        <slot />
        {
          icon && (
            <div
              class={`h-6 w-6 ${iconSizeClass} text-white mt-1 ml-1.5`}
              set:html={icon.svg
                .replace('xmlns="http://www.w3.org/2000/svg"', 'fill="white"')
                .replace(/<title>.*<\/title>/, `<title></title>`)}
            />
          )
        }
      </h1>
      <div class="w-full flex flex-col justify-center content-center" style="height: calc(100% - 3.5rem)">
        <slot name="description" />
      </div>
    </div>
  </div>
</a>

<style>
  .outer-container:hover .title-container {
    height: 0;
    opacity: 0;
  }
  .outer-container:hover .description-container {
    height: auto;
    opacity: 1;
  }
  .title-container {
    transition: height 0ms 400ms, opacity 400ms 0ms;
    overflow: hidden;
  }
  .title-container.visible {
    height: auto;
    opacity: 1;
    transition: height 0ms 0ms, opacity 600ms 0ms;
  }
  .description-container {
    transition: height 0ms 400ms, opacity 400ms 0ms;
    overflow: hidden;
  }
  .description-container.visible {
    height: auto;
    opacity: 1;
    transition: height 0ms 0ms, opacity 600ms 0ms;
  }
  @keyframes opening {
    0% {
      transform: translateX(320px);
      opacity: 0;
    }
    100% {
      transform: translateX(0px);
      opacity: 1;
    }
  }
</style>
